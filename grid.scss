// ----
// USB Flexbox GRID system v.1.0
// Do not have PUSH and PULL classes
// Sass (v.undefined)
// Compass (v.undefined)
// dart-sass (v1.2.1)
// ----
// Flexbox Mixins
//
// Basically this will use:
//
// * Fallback, old syntax (IE10, mobile webkit browsers - no wrapping)
// * Final standards syntax (FF, Safari, Chrome, IE11, Opera)
//
// This was inspired by:
// 
// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
// 
// With help from:
// 
// * http://w3.org/tr/css3-flexbox/
// * http://the-echoplex.net/flexyboxes/
// * http://msdn.microsoft.com/en-us/library/ie/hh772069(v=vs.85).aspx
// * http://css-tricks.com/using-flexbox/
// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
// * https://developer.mozilla.org/en-us/docs/web/guide/css/flexible_boxes

//----------------------------------------------------------------------

// Flexbox Containers
//
// The 'flex' value causes an element to generate a block-level flex
// container box.
//
// The 'inline-flex' value causes an element to generate a inline-level
// flex container box. 
//
// display: flex | inline-flex
//
// http://w3.org/tr/css3-flexbox/#flex-containers
//
// (Placeholder selectors for each type, for those who rather @extend)

@mixin flexbox {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

%flexbox { @include flexbox; }

//----------------------------------

@mixin inline-flex {
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: -moz-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

%inline-flex { @include inline-flex; }

//----------------------------------------------------------------------

// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in. 
//
// Values: row | row-reverse | column | column-reverse
// Default: row
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property

@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}
	// Shorter version:
	@mixin flex-dir($args...) { @include flex-direction($args...); }

//----------------------------------------------------------------------

// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in. 
//
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property

@mixin flex-wrap($value: nowrap) {
	// No Webkit Box fallback.
	-webkit-flex-wrap: $value;
	-moz-flex-wrap: $value;
	@if $value == nowrap {
		-ms-flex-wrap: none;
	} @else { 
		-ms-flex-wrap: $value; 
	}
	flex-wrap: $value;
}

//----------------------------------------------------------------------

// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's
// main and cross axes.
//
// Values: <flex-direction> | <flex-wrap> 
// Default: row nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property

@mixin flex-flow($values: (row nowrap)) {
	// No Webkit Box fallback.
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}

//----------------------------------------------------------------------

// Flexbox Order
//
// The 'order' property controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#order-property

@mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-moz-order: $int;
	-ms-flex-order: $int;
	order: $int;
}

//----------------------------------------------------------------------

// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#flex-grow-property

@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

//----------------------------------------------------------------------

// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers
// are invalid.
//
// Default: 1
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property

@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}

//----------------------------------------------------------------------

// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid. 
//
// Values: Like "width" 
// Default: auto
//
// http://www.w3.org/TR/css3-flexbox/#flex-basis-property

@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}

//----------------------------------------------------------------------

// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
//
// http://w3.org/tr/css3-flexbox/#flex-property

@mixin flex($fg: 1, $fs: null, $fb: null) {
    
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

//----------------------------------------------------------------------

// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
//
// http://w3.org/tr/css3-flexbox/#justify-content-property

@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;		
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}
	// Shorter version:
	@mixin flex-just($args...) { @include justify-content($args...); }

//----------------------------------------------------------------------

// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.) 
//
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-items-property

@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}

//----------------------------------

// Flexbox Align Self
//
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto

@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	-moz-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}

//----------------------------------------------------------------------

// Flexbox Align Content
//
// The 'align-content' property aligns a flex container's lines within the
// flex container when there is extra space in the cross-axis, similar to
// how 'justify-content' aligns individual items within the main-axis. Note,
// this property has no effect when the flexbox has only a single line.
//
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-content-property

@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	-moz-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	} @else if $value == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}

//Define branding
$brand: collab;
// Set the number of columns you want to use on your layout.
$flexboxgrid-grid-columns: 12 !default;
// Set the gutter between columns.
$flexboxgrid-gutter-width: 1rem !default;
// Set a margin for the container sides.
$flexboxgrid-outer-margin: 2rem !default;
// Create or remove breakpoints for your project
// Syntax:
// name SIZErem,
$flexboxgrid-breakpoints: sm 576px 540px,
md 768px 720px,
lg 992px 960px,
xl 1200px 1140px !default;

$justify-content: start,
end,
center,
around,
between;

$align-content: start,
end,
center,
around,
between,
stretch;

$align-items: start,
end,
center,
baseline,
stretch;


$flexboxgrid-max-width: 1200px !default;

//
// -- Stop editing -- //
//

// $gutter-compensation: $flexboxgrid-gutter-width * .5 * -1;
// $half-gutter-width: $flexboxgrid-gutter-width * .5;

@mixin col {
    width: 100%;
    padding-right: $flexboxgrid-gutter-width;
    padding-left: $flexboxgrid-gutter-width;
}

%col {
    @include col;
}
  

.container {
  width: 100%;
  margin: 0 auto;
  padding-right: $flexboxgrid-outer-margin;
  padding-left: $flexboxgrid-outer-margin;

  &-fluid {
    margin-right: auto;
    margin-left: auto;
    padding-right: $flexboxgrid-outer-margin;
    padding-left: $flexboxgrid-outer-margin;
  }
}

.row {
  @include flexbox();
  @include flex(0, 1, auto);
  @include flex-direction(row);
  @include flex-wrap(wrap);
  margin-right: -$flexboxgrid-outer-margin;
  margin-left: -$flexboxgrid-outer-margin;
}

.col {
  @extend %col;
  @include flex-grow(1);
  @include flex-basis(0);
  max-width: 100%;
}

.row.nowrap {
  @include flex-wrap(nowrap);
}

.row.reverse {
  @include flex-direction(row-reverse);
}

.col.reverse {
  @include flex-direction(column-reverse);
}


@for $i from 1 through $flexboxgrid-grid-columns {
  .col--#{$i} {
    // @include flexboxgrid-sass-col-common;
    @include flex (0 0 100% / $flexboxgrid-grid-columns * $i);
    // @include flex-basis(100% / $flexboxgrid-grid-columns * $i);
    max-width: 100% / $flexboxgrid-grid-columns * $i;
  }
  
  @each $breakpoint in $flexboxgrid-breakpoints {
  $name: nth($breakpoint, 1);
        .col--#{$name}-#{$i} {
            @extend %col;
      }
  }
  
}

@for $i from 0 through $flexboxgrid-grid-columns {
  .col--offset-#{$i} {

    // @include flexboxgrid-sass-col-common;
    @if $i==0 {
      margin-left: 0;
    }

    @else {
      margin-left: 100% / $flexboxgrid-grid-columns * $i;
    }
  }

  .col--order-#{$i} {
    order: #{$i};
  }
}

.col--order-first {
  order: -1;
}

.col--order-last {
  order: 13;
}

@each $content in $justify-content{
  .container--justify-content-#{$content} {
      @if $content == center {
          @include justify-content(#{$content});
      }
      @else if $content == around or $content == between {
          @include justify-content(space-#{$content});
      }
      @else {
          @include justify-content(flex-#{$content});
      }
  }
}

@each $content in $align-content{
  .container--align-content-#{$content} {
      @if $content == center or $content == stretch{
          @include align-content(#{$content});
      }
      @else if $content == around or $content == between {
          @include align-content(space-#{$content});
      }
      @else {
          @include align-content(flex-#{$content});
      }
  }
}

@each $content in $align-items{
  .container--align-items-#{$content} {
      @if $content == center or $content == stretch or $content == baseline{
          @include align-items(#{$content});
      }
      @else if $content == around or $content == between {
          @include align-items(space-#{$content});
      }
      @else {
          @include align-items(flex-#{$content});
      }
  }
    .container--align-self-#{$content} {
      @if $content == center or $content == stretch or $content == baseline{
          @include align-self(#{$content});
      }
      @else if $content == around or $content == between {
          @include align-self(space-#{$content});
      }
      @else {
          @include align-self(flex-#{$content});
      }
  }
}

// .#{$brand}--justify-content_start {
//   @include justify-content(flex-start);
// }

// .center-#{$name} {
//   @include justify-content(center);
//   text-align: center;
// }

// .end-#{$name} {
//   @include justify-content(flex-end);
//   text-align: right;
// }

// .top-#{$name} {
//   @include align-items(flex-start);
// }

// .middle-#{$name} {
//   @include align-items(center);
// }

// .bottom-#{$name} {
//   @include align-items(flex-end);
// }

// .#{$brand}--justify-content_around {
//   @include justify-content(space-around);
// }

// .#{$brand}--justify-content_between {
//   @include justify-content(space-between);
// }

// .first-#{$name} {
//   order: -1;
// }

// .last-#{$name} {
//   order: 1;
// }


@each $breakpoint in $flexboxgrid-breakpoints {
  $name: nth($breakpoint, 1);
  $size: nth($breakpoint, 2);
  $container: nth($breakpoint, 3);

  @media only screen and (min-width: $size) {
    .container {
      max-width: $container;
    }

    .col--#{$name} {
      @include col;
      @include flex-grow(1);
      @include flex-basis(0);
      max-width: 100%;
    }

    @for $i from 1 through $flexboxgrid-grid-columns {
      .col--#{$name}-#{$i} {
        // @include flexboxgrid-sass-col-common;
        @include flex (0 0 100% / $flexboxgrid-grid-columns * $i);
        max-width: 100% / $flexboxgrid-grid-columns * $i;
      }
    }

    // @for $i from 0 through $flexboxgrid-grid-columns {
    //   .col-#{$name}-offset-#{$i} {
    //     @include flexboxgrid-sass-col-common;
    //     @if $i == 0 {
    //       margin-left: 0;
    //     } @else {
    //       margin-left: 100% / $flexboxgrid-grid-columns * $i;
    //     }
    //   }
    // }
    // .col-#{$name} {
    //   @include flex-grow(1);
    //   @include flex-basis(0);
    //   max-width: 100%;
    // }
    // .start-#{$name} {
    //   @include justify-content(flex-start);
    //   text-align: left;
    // }

    // .center-#{$name} {
    //   @include justify-content(center);
    //   text-align: center;
    // }

    // .end-#{$name} {
    //   @include justify-content(flex-end);
    //   text-align: right;
    // }

    // .top-#{$name} {
    //   @include align-items(flex-start);
    // }

    // .middle-#{$name} {
    //   @include align-items(center);
    // }

    // .bottom-#{$name} {
    //   @include align-items(flex-end);
    // }

    // .around-#{$name} {
    //   @include justify-content(space-around);
    // }

    // .between-#{$name} {
    //   @include justify-content(space-between);
    // }

    // .first-#{$name} {
    //   order: -1;
    // }

    // .last-#{$name} {
    //   order: 1;
    // }
  }
}

